// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Constellation SDK Code Generator.
//     Generator Version: 1.8.0.16088
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Constellation;
using Constellation.Package;
using System.Threading;
using System.Threading.Tasks;

namespace BlackHole
{
    /// <summary>
    /// Represents your Constellation
    /// </summary>
	public static class MyConstellation
	{
		/// <summary>
		/// Specifies the sentinels in your Constellation
		/// </summary>
		public enum Sentinels
		{
			/// <summary>
            /// Sentinel 'ROMAIN-MSI'
            /// </summary>
			[RealName("ROMAIN-MSI")]
			ROMAIN_MSI,
		}

		/// <summary>
		/// Specifies the package's instances in your Constellation
		/// </summary>
		public enum PackageInstances
		{
			/// <summary>
            /// Package 'Ratp' on 'ROMAIN-MSI'
            /// </summary>
			[RealName("ROMAIN-MSI/Ratp")]
			ROMAIN_MSI_Ratp,
			/// <summary>
            /// Package 'GoogleTraffic' on 'ROMAIN-MSI'
            /// </summary>
			[RealName("ROMAIN-MSI/GoogleTraffic")]
			ROMAIN_MSI_GoogleTraffic,
		}
		
		/// <summary>
		/// Specifies the packages in your Constellation
		/// </summary>
		public enum Packages
		{
			/// <summary>
            /// Package 'Ratp'
            /// </summary>
			[RealName("Ratp")]
			Ratp,
			/// <summary>
            /// Package 'GoogleTraffic'
            /// </summary>
			[RealName("GoogleTraffic")]
			GoogleTraffic,
		}
    
		/// <summary>
        /// Creates the message scope to the specified sentinel.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName());
		}    
		
		/// <summary>
        /// Creates the message scope to the specified package's instance.
        /// </summary>
        /// <param name="package">The package's instance.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());      
		} 
		
		/// <summary>
        /// Creates the message scope to the specified package.
        /// </summary>
        /// <param name="package">The package.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());        
		}
	}
	
	/// <summary>
    /// Specifies the real name of an enum value.
    /// </summary>
    /// <seealso cref="System.Attribute" />
	[System.AttributeUsage(System.AttributeTargets.Field)]
	public class RealNameAttribute : System.Attribute
	{
	    /// <summary>
        /// Gets or sets the real name.
        /// </summary>
        /// <value>
        /// The real name.
        /// </value>
		public System.String RealName { get; set; }

		/// <summary>
        /// Initializes a new instance of the <see cref="RealNameAttribute"/> class.
        /// </summary>
        /// <param name="realname">The real name.</param>
		public RealNameAttribute(System.String realname)
		{
			this.RealName = realname;
		}
		
	    /// <summary>
        /// Gets the real name of an enum value.
        /// </summary>
        /// <typeparam name="TEnum">The type of the enum.</typeparam>
        /// <param name="value">The enum value.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName<TEnum>(TEnum value)
		{
			var memInfo = typeof(TEnum).GetMember(value.ToString());
			var attributes = memInfo[0].GetCustomAttributes(typeof(RealNameAttribute), false);
			return (attributes != null && attributes.Length > 0) ? ((RealNameAttribute)attributes[0]).RealName : value.ToString();
		}
	}

	/// <summary>
    /// Provides extension methods to get the real name of a Sentinel, Package or PackageInstance.
    /// </summary>
	public static class RealNameExtension
	{
		public static string GetRealName(this MyConstellation.Sentinels sentinel)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Sentinels>(sentinel);
		}

		public static string GetRealName(this MyConstellation.Packages package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Packages>(package);
		}

		public static string GetRealName(this MyConstellation.PackageInstances package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.PackageInstances>(package);
		}
	}
}


namespace BlackHole.Ratp.MessageCallbacks
{
	/// <summary>
	/// Type 'Response_traffic'
	/// </summary>
	public class Response_traffic 
	{
		/// <summary>
		/// The line.
		/// </summary>
		public System.String line { get; set; }

		/// <summary>
		/// The slug.
		/// </summary>
		public System.String slug { get; set; }

		/// <summary>
		/// The title.
		/// </summary>
		public System.String title { get; set; }

		/// <summary>
		/// The message.
		/// </summary>
		public System.String message { get; set; }

	}

	/// <summary>
	/// Type 'Schedule'
	/// </summary>
	public class Schedule 
	{
		/// <summary>
		/// The id.
		/// </summary>
		public System.String id { get; set; }

		/// <summary>
		/// The destination.
		/// </summary>
		public System.String destination { get; set; }

		/// <summary>
		/// The message.
		/// </summary>
		public System.String message { get; set; }

	}

	/// <summary>
	/// Provides extension methods for the MessageScope to Ratp
	/// </summary>
	public static class RatpExtensions
	{
		/// <summary>
		/// Create a RatpScope
		/// </summary>
		/// <param name="scope">The Constellation MessageScope</param>
		public static RatpScope ToRatpScope(this MessageScope scope)
		{
			return new RatpScope(scope);
		}

		/// <summary>
		/// Create a RatpScope to all packages of the specified sentinel
		/// </summary>
		/// <param name="sentinel">The sentinel</param>
		public static RatpScope CreateRatpScope(this BlackHole.MyConstellation.Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName()).ToRatpScope();        
		}
		
		/// <summary>
		/// Create a RatpScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static RatpScope CreateRatpScope(this BlackHole.MyConstellation.PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToRatpScope();        
		}
		
		/// <summary>
		/// Create a RatpScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static RatpScope CreateRatpScope(this BlackHole.MyConstellation.Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToRatpScope();  
		}
	}

	/// <summary>
    /// Represent a message scope to Ratp
    /// </summary>
	public class RatpScope
	{
        /// <summary>
        /// The current scope
        /// </summary>
		private MessageScope currentScope = null;

		/// <summary>
        /// Initializes a new instance of the <see cref="RatpScope"/> class.
        /// </summary>
        /// <param name="scope">The scope.</param>
		public RatpScope(MessageScope scope)
		{
			this.currentScope = scope;
		}

		/// <summary>
		/// Send message 'GetTraffic' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <returns>Task of Response_traffic</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>		
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<Response_traffic> GetTraffic(System.String type, System.String line, CancellationToken cancellationToken, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetTraffic<Response_traffic>(type, line, cancellationToken, out context);
            return result.ContinueWith<Response_traffic>(task => (Response_traffic)task.Result);
		}

		/// <summary>
		/// Send message 'GetTraffic' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <returns>Task of Response_traffic</returns>
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<Response_traffic> GetTraffic(System.String type, System.String line, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetTraffic<Response_traffic>(type, line, out context);
            return result.ContinueWith<Response_traffic>(task => (Response_traffic)task.Result);
		}

		/// <summary>
		/// Send message 'GetTraffic' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <returns>Task of Response_traffic</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>
		public Task<Response_traffic> GetTraffic(System.String type, System.String line, CancellationToken cancellationToken)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetTraffic<Response_traffic>(type, line, cancellationToken);
            return result.ContinueWith<Response_traffic>(task => (Response_traffic)task.Result);
		}

		/// <summary>
		/// Send message 'GetTraffic' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <returns>Task of Response_traffic</returns>
		public Task<Response_traffic> GetTraffic(System.String type, System.String line)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetTraffic<Response_traffic>(type, line);
            return result.ContinueWith<Response_traffic>(task => (Response_traffic)task.Result);
		}


		/// <summary>
		/// Send message 'GetSchedule' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <param name="station">The 'station' parameter</param>
		/// <param name="direction">The 'direction' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of Schedule</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>		
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Collections.Generic.List<Schedule>> GetSchedule(System.String type, System.String line, System.String station, System.String direction, CancellationToken cancellationToken, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetSchedule<System.Collections.Generic.List<Schedule>>(type, line, station, direction, cancellationToken, out context);
            return result.ContinueWith<System.Collections.Generic.List<Schedule>>(task => (System.Collections.Generic.List<Schedule>)task.Result);
		}

		/// <summary>
		/// Send message 'GetSchedule' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <param name="station">The 'station' parameter</param>
		/// <param name="direction">The 'direction' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of Schedule</returns>
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Collections.Generic.List<Schedule>> GetSchedule(System.String type, System.String line, System.String station, System.String direction, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetSchedule<System.Collections.Generic.List<Schedule>>(type, line, station, direction, out context);
            return result.ContinueWith<System.Collections.Generic.List<Schedule>>(task => (System.Collections.Generic.List<Schedule>)task.Result);
		}

		/// <summary>
		/// Send message 'GetSchedule' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <param name="station">The 'station' parameter</param>
		/// <param name="direction">The 'direction' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of Schedule</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>
		public Task<System.Collections.Generic.List<Schedule>> GetSchedule(System.String type, System.String line, System.String station, System.String direction, CancellationToken cancellationToken)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetSchedule<System.Collections.Generic.List<Schedule>>(type, line, station, direction, cancellationToken);
            return result.ContinueWith<System.Collections.Generic.List<Schedule>>(task => (System.Collections.Generic.List<Schedule>)task.Result);
		}

		/// <summary>
		/// Send message 'GetSchedule' to the current scope
		/// </summary>
		/// <param name="type">The 'type' parameter</param>
		/// <param name="line">The 'line' parameter</param>
		/// <param name="station">The 'station' parameter</param>
		/// <param name="direction">The 'direction' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of Schedule</returns>
		public Task<System.Collections.Generic.List<Schedule>> GetSchedule(System.String type, System.String line, System.String station, System.String direction)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetSchedule<System.Collections.Generic.List<Schedule>>(type, line, station, direction);
            return result.ContinueWith<System.Collections.Generic.List<Schedule>>(task => (System.Collections.Generic.List<Schedule>)task.Result);
		}

	}
}

namespace BlackHole.GoogleTraffic.StateObjects
{

	/// <summary>
	/// Type 'TrafficData'
	/// </summary>
	public class TrafficData 
	{
		/// <summary>
		/// The Name.
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// The DistanceString.
		/// </summary>
		public System.String DistanceString { get; set; }

		/// <summary>
		/// The TimeString.
		/// </summary>
		public System.String TimeString { get; set; }

		/// <summary>
		/// The InfoTraffic.
		/// </summary>
		public System.String InfoTraffic { get; set; }

		/// <summary>
		/// The DistanceInKm.
		/// </summary>
		public System.Double DistanceInKm { get; set; }

		/// <summary>
		/// The Time.
		/// </summary>
		public System.TimeSpan Time { get; set; }

		/// <summary>
		/// The TimeWithTraffic.
		/// </summary>
		public System.TimeSpan TimeWithTraffic { get; set; }

	}

    /// <summary>
    /// Provides extension methods for GoogleTraffic's StateObjects
    /// </summary>
	public static class GoogleTrafficExtensions
	{
		/// <summary>
		/// Get StateObject value as TrafficData
		/// </summary>
		public static TrafficData AsGoogleTrafficTrafficData(this StateObject stateObject)
		{
			return stateObject.GetValue<TrafficData>();
		}

		/// <summary>
		/// Get StateObject value as TrafficData
		/// </summary>
		public static TrafficData AsGoogleTrafficTrafficData(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<TrafficData>();
		}

	}
}

namespace BlackHole.GoogleTraffic.MessageCallbacks
{
	/// <summary>
	/// Type 'TrafficData'
	/// </summary>
	public class TrafficData 
	{
		/// <summary>
		/// The Name.
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// The DistanceString.
		/// </summary>
		public System.String DistanceString { get; set; }

		/// <summary>
		/// The TimeString.
		/// </summary>
		public System.String TimeString { get; set; }

		/// <summary>
		/// The InfoTraffic.
		/// </summary>
		public System.String InfoTraffic { get; set; }

		/// <summary>
		/// The DistanceInKm.
		/// </summary>
		public System.Double DistanceInKm { get; set; }

		/// <summary>
		/// The Time.
		/// </summary>
		public System.TimeSpan Time { get; set; }

		/// <summary>
		/// The TimeWithTraffic.
		/// </summary>
		public System.TimeSpan TimeWithTraffic { get; set; }

	}

	/// <summary>
	/// Provides extension methods for the MessageScope to GoogleTraffic
	/// </summary>
	public static class GoogleTrafficExtensions
	{
		/// <summary>
		/// Create a GoogleTrafficScope
		/// </summary>
		/// <param name="scope">The Constellation MessageScope</param>
		public static GoogleTrafficScope ToGoogleTrafficScope(this MessageScope scope)
		{
			return new GoogleTrafficScope(scope);
		}

		/// <summary>
		/// Create a GoogleTrafficScope to all packages of the specified sentinel
		/// </summary>
		/// <param name="sentinel">The sentinel</param>
		public static GoogleTrafficScope CreateGoogleTrafficScope(this BlackHole.MyConstellation.Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName()).ToGoogleTrafficScope();        
		}
		
		/// <summary>
		/// Create a GoogleTrafficScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static GoogleTrafficScope CreateGoogleTrafficScope(this BlackHole.MyConstellation.PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToGoogleTrafficScope();        
		}
		
		/// <summary>
		/// Create a GoogleTrafficScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static GoogleTrafficScope CreateGoogleTrafficScope(this BlackHole.MyConstellation.Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToGoogleTrafficScope();  
		}
	}

	/// <summary>
    /// Represent a message scope to GoogleTraffic
    /// </summary>
	public class GoogleTrafficScope
	{
        /// <summary>
        /// The current scope
        /// </summary>
		private MessageScope currentScope = null;

		/// <summary>
        /// Initializes a new instance of the <see cref="GoogleTrafficScope"/> class.
        /// </summary>
        /// <param name="scope">The scope.</param>
		public GoogleTrafficScope(MessageScope scope)
		{
			this.currentScope = scope;
		}

		/// <summary>
		/// Send message 'GetRoutes' to the current scope
		/// </summary>
		/// <param name="from">The 'from' parameter</param>
		/// <param name="to">The 'to' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of TrafficData</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>		
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Collections.Generic.List<TrafficData>> GetRoutes(System.String from, System.String to, CancellationToken cancellationToken, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetRoutes<System.Collections.Generic.List<TrafficData>>(from, to, cancellationToken, out context);
            return result.ContinueWith<System.Collections.Generic.List<TrafficData>>(task => (System.Collections.Generic.List<TrafficData>)task.Result);
		}

		/// <summary>
		/// Send message 'GetRoutes' to the current scope
		/// </summary>
		/// <param name="from">The 'from' parameter</param>
		/// <param name="to">The 'to' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of TrafficData</returns>
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Collections.Generic.List<TrafficData>> GetRoutes(System.String from, System.String to, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetRoutes<System.Collections.Generic.List<TrafficData>>(from, to, out context);
            return result.ContinueWith<System.Collections.Generic.List<TrafficData>>(task => (System.Collections.Generic.List<TrafficData>)task.Result);
		}

		/// <summary>
		/// Send message 'GetRoutes' to the current scope
		/// </summary>
		/// <param name="from">The 'from' parameter</param>
		/// <param name="to">The 'to' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of TrafficData</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>
		public Task<System.Collections.Generic.List<TrafficData>> GetRoutes(System.String from, System.String to, CancellationToken cancellationToken)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetRoutes<System.Collections.Generic.List<TrafficData>>(from, to, cancellationToken);
            return result.ContinueWith<System.Collections.Generic.List<TrafficData>>(task => (System.Collections.Generic.List<TrafficData>)task.Result);
		}

		/// <summary>
		/// Send message 'GetRoutes' to the current scope
		/// </summary>
		/// <param name="from">The 'from' parameter</param>
		/// <param name="to">The 'to' parameter</param>
		/// <returns>Task of System.Collections.Generic.List of TrafficData</returns>
		public Task<System.Collections.Generic.List<TrafficData>> GetRoutes(System.String from, System.String to)
		{
			Task<dynamic> result = this.currentScope.GetProxy().GetRoutes<System.Collections.Generic.List<TrafficData>>(from, to);
            return result.ContinueWith<System.Collections.Generic.List<TrafficData>>(task => (System.Collections.Generic.List<TrafficData>)task.Result);
		}

	}
}
